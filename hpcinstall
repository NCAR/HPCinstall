#!/bin/env python

import optparse # cruder than others, but compatible with older versions of python
import os, sys, subprocess

usage = "usage: %prog [options] <software-version-compiler-version>"
parser = optparse.OptionParser(usage)

parser.add_option("-c", "--csgteam", action="store_true", default=False, help='Install as csgteam (default: False)')

(options, args) = parser.parse_args()

if len(args) != 1:
    parser.print_help()
    sys.exit(1)

install_file = args[0]

if not os.path.isfile(install_file):
    parser.print_help()
    sys.exit(1)

stuff = install_file.split("-")

if len(stuff) !=2 and len(stuff) !=4:
    print "The install script file should be named like <software-version-compiler-version>,"
    print "or <software-version>. Got '" + install_file + "' instead"
    sys.exit(1)

if len(stuff) == 4:
    my_compiler = stuff[2] + "/" + stuff[3]
else:
    my_compiler = ""

my_program = stuff[0] + "/" + stuff[1]

if options.csgteam:
    if os.environ['USER'] != "csgteam":
        print "Must sudo into 'csgteam' user to run as csgteam"
        sys.exit(1)
    prefix = "/glade/apps/opt/" + my_program + "/" + my_compiler
    modulefile = "/glade/apps/modulefiles/" + my_program + ".lua"
else:
    prefix = "/glade/scratch/" + os.environ['USER'] + "/" + my_program + "/" + my_compiler
    modulefile = "/glade/scratch/modulefiles/" + my_program + ".lua"

print "Will set INSTALL_DIR environmental variable to", prefix
print "and MODULE_FILENAME one to", modulefile
sys.stdout.write("then run ./" + install_file + " as " + os.environ['USER'] + ". ")

if options.csgteam:
    sys.stdout.write("Continue? ")
    answer = sys.stdin.readline()
    print
    if answer.lower().strip() != "yes":
        print "You did not say an ethusiastic 'yes', aborting..."
        sys.exit(1)
else:
    print "\n"

os.environ['INSTALL_DIR'] = prefix
os.environ['MODULE_FILENAME'] = modulefile

env_log = "log.env.txt"
print "Saving environment status in", env_log, "...",
subprocess.call("env > " + env_log, shell=True)
print "Done."

module_log = "log.modules.txt"
print "Saving module list in", module_log,
subprocess.call("module list &> " + module_log, shell=True)
print "Done."

install_log = "log.install." + install_file + ".txt"
print "Passing control to ./" + install_file, "and logging output into", install_log
print "----------------------------------------------"
subprocess.call("./" + install_file, stderr=subprocess.STDOUT)

print "Not logged anything in", install_log, "see https://github.com/NCAR/HPCinstall/issues/3"
