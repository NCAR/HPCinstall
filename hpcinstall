#!/bin/env python

import optparse # cruder than others, but compatible with older versions of python
import os, shutil, sys, subprocess
import tee

def parse_installscript_filename(filename):
    sw_structure = filename.split("-")

    if len(sw_structure) !=2 and len(sw_structure) !=4:
        print "The install script file should be named like <software-version-compiler-version>,"
        print "or <software-version>. Got '" + filename + "' instead"
        sys.exit(1)

    if len(sw_structure) == 4:
        my_compiler = sw_structure[2] + "/" + sw_structure[3]
    else:
        my_compiler = ""

    return my_compiler, sw_structure[0] + "/" + sw_structure[1]

use_parent_shell = os.environ['SHELL'] + " -c "    # workaround for fixing tcsh module problem, see https://github.com/NCAR/HPCinstall/issues/6

def parse_command_line_arguments():
    usage = ("usage: %prog [options] <software-version-compiler-version>\n" +
             "Required:\n" +
             "  <software-ver-compiler-ver> script in the current directory\n" +
             "                              doing the build and install\n" +
             "                              (don't use '/' or fully qualified paths)")
    parser = optparse.OptionParser(usage)
    parser.add_option("-c", "--csgteam", action="store_true", default=False, help='Install as csgteam (default: False)')
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        sys.exit(1)
    install_script = args[0]
    if not os.path.isfile(install_script) or "/" in install_script:
        parser.print_help()
        sys.exit(1)
    return install_script, options

install_script, options = parse_command_line_arguments()

my_compiler, my_program = parse_installscript_filename(install_script)

if options.csgteam:
    if os.environ['USER'] != "csgteam":
        print "Must sudo into 'csgteam' user to run as csgteam"
        sys.exit(1)
    prefix = "/glade/apps/opt/" + my_program + "/" + my_compiler
    modulefile = "/glade/apps/modulefiles/" + my_program + ".lua"
else:
    prefix = "/glade/scratch/" + os.environ['USER'] + "/" + my_program + "/" + my_compiler
    modulefile = "/glade/scratch/modulefiles/" + my_program + ".lua"

if os.path.exists(prefix):
    print "File already exists", prefix
    sys.exit(1)
if os.path.exists(modulefile):
    print "File already exists", prefix
    sys.exit(1)

hpcinstall_log = "log.hpcinstall." + str(os.getpid()) + ".txt"
tee.overwrite_out_to(hpcinstall_log)

print "Will set INSTALL_DIR environmental variable to", prefix
print "and MODULE_FILENAME one to", modulefile
sys.stdout.write("then run ./" + install_script + " as " + os.environ['USER'] + ". ")

if options.csgteam:
    sys.sterr.write("Continue? ")
    answer = sys.stdin.readline()
    print
    if answer.lower().strip() != "yes":
        print "You did not say an ethusiastic 'yes', aborting..."
        sys.exit(1)
else:
    print "\n"

os.environ['INSTALL_DIR'] = prefix
os.environ['MODULE_FILENAME'] = modulefile

env_log = "log.env.txt"
print "Saving environment status in", env_log, "...",
subprocess.call("env > " + env_log, shell=True)
print "Done."

module_log = "log.modules.txt"
print "Saving module list in", module_log,
subprocess.call(use_parent_shell + "'module list' &> " + module_log, shell=True)
print "Done."

install_log = "log.install." + install_script + ".txt"
print "Passing control to ./" + install_script, "and logging output into", install_log
print "----------------------------------------------"
subprocess.call(use_parent_shell + "./" + install_script, stderr=subprocess.STDOUT, shell=True)
subprocess.call("touch " + install_log, shell=True)

print "Not logged anything in", install_log, "see https://github.com/NCAR/HPCinstall/issues/3"

tee.close_all_files()

build_dir = prefix + "/BUILD_DIR/"
os.makedirs(build_dir)
for logfile in (install_log, module_log, env_log, hpcinstall_log):
    shutil.copyfile(logfile, build_dir + logfile)
#subprocess.call("mv log*.txt " + build_dir, stderr=subprocess.STDOUT, shell=True)

