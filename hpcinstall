#!/usr/bin/env python
import argparse, os, stat, shutil, sys, subprocess, yaml, datetime, re
import tee, hashdir

HPCi_log = "hpci.main.log"
env_log = "hpci.env.log"
module_log = "hpci.modules.log"
list_of_dirs =['scratch_tree', 'sw_install_dir', 'mod_install_dir' ]

def print_invocation_info():
    if os.environ['USER'] == "csgteam":
        running_user = "csgteam (invoked by " + os.environ['SUDO_USER'] + ")"
    else:
        running_user = os.environ['USER']
    print "On", datetime.datetime.now().isoformat(), running_user
    print "called HPCinstall from", os.path.realpath(__file__)
    print "invoked as",
    simple = True
    for arg in sys.argv:
        if " " in arg or "'" in arg or '"' in arg or "\\" in arg:
            simple = False
    if simple:
        print " ".join(sys.argv)
    else:
        print sys.argv
    print # emtpy line

def parse_config_data(yaml_data):
    default_dirs = {}
    config = yaml.safe_load(yaml_data)
    if not config:
        raise KeyError(list_of_dirs)
    for dirname in list_of_dirs:
        default_dirs[dirname] = os.path.abspath(os.path.expanduser(config[dirname])) + "/"
    return default_dirs

def parse_installscript_filename(filename):
    sw_structure = filename.split("-")
    if len(sw_structure) !=3:
        print >> sys.stderr, "The software name and version must be specified as <build-software-version>. Got '" + filename + "' instead."
        if len(sw_structure) == 2:
            print >> sys.stderr, "Maybe you meant build-" + filename +"?"
        sys.exit(1)
    try:
        version = int(sw_structure[2].replace(".", ""))
        if version < 0:
            raise ValueError()
    except ValueError:
        print >> sys.stderr, "The software name and version must be specified as <build-software-version>. Got '" + filename + "' instead."
        print >> sys.stderr, "The version must be in i[.j[.k[...]]] format"
        sys.exit(1)
    return sw_structure[1] + "/" + sw_structure[2]

def validate_url(u):
    # cut and paste from django with localhost removed, no test needed
    regex = re.compile(
        r'^(?:http|ftp)s?://' # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
        r'(?::\d+)?' # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return regex.match(u)

def parse_command_line_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("install_script", metavar="install-software-ver", type=argparse.FileType('r'),
                                                               help="script in the current directory which\n" +
                                                                    "                 does the build and install (do not use\n" +
                                                                    "                 './', relative nor fully qualified paths)")
    parser.add_argument("-c", "--csgteam", action="store_true", default=False, help='Install as csgteam (default: False)')
    parser.add_argument("-f", "--force", action="store_true", default=False, help='Force overwrite of existing install (default: False)')
    parser.add_argument("-d", "--debug", action="store_true", default=False, help='Debug mode i.e. more verbose output (default: False)')
    parser.add_argument("--nossh", action="store_true", default=False, help=argparse.SUPPRESS) # Don't manually invoke this

    should_exit = False
    try:
        # args = dict(vars(parser.parse_args())) maybe for later
        args = parser.parse_args()
    except IOError, e:
        print >> sys.stderr, "Troubles accessing <install-software-ver> file"
        print >> sys.stderr, e
        print
        parser.print_help()
        sys.exit(1)          # can't try most of the following

    config_filename = ( os.path.dirname(os.path.realpath(__file__)) + # directory where this script is
                        "/config.hpcinstall.yaml" )
    try:
        defaults = parse_config_data(open(config_filename))
    except KeyError:
        print >> sys.stderr, "Error:", config_filename, "does not contain the expected fields", list_of_dirs
        should_exit = True
    except IOError as e:
        print >> sys.stderr, e
        print >> sys.stderr, "Cannot set", list_of_dirs, "-- ABORTING"
        should_exit = True

    # something  like `if not args.defaults:` since the following would break a command line argument named defaults, if ever added
    args.defaults = defaults

    install_script_str = args.install_script.read()
    ## This explictly overrides args content, maybe a dict copy as described above?
    #args.install_script = install_script_str

    legacy_stuff = parse_installscript_for_directives(install_script_str)
    stuff        = parse_installscript_for_directives(install_script_str, "-")
    if len(stuff) == 0:
        if len(legacy_stuff) > 0:
            print >> sys.stderr, "Deprecation ERROR: The anonymous      '#HPCI foo'    directive is deprecated."
            print >> sys.stderr, "                   Must use the named '#HPCI -x foo' directive instead."
            modules_to_load = legacy_stuff
        else:
            modules_to_load = ""
    else:
        if len(legacy_stuff) != len(stuff):
            print >> sys.stderr, "ERROR: can't mix anoymous '#HPCI foo' and named '#HPCI -? bar' directives."
            should_exit = True
        modules_to_load = parse_installscript_for_directives(install_script_str, "-x")

    # something  like `if not args.modules_to_load:` since the following would break a command line argument named modules-to-load, if ever added
    args.modules_to_load = modules_to_load

    urls     = parse_installscript_for_directives(install_script_str, "-u")
    tarballs = parse_installscript_for_directives(install_script_str, "-a")
    if len(urls) == 0 and len(tarballs) == 0:
        print >> sys.stderr, "ERROR: Either or both the '#HPCI -u URL' and '#HPCI -a source.tgz' are needed"
        should_exit = True

    for u in urls:
        if not validate_url(u):
            print >> sys.stderr, "Not a valid URL", u
            should_exit = True
    for t in tarballs:
        tarball = os.path.abspath(os.path.expanduser(t))
        if not os.access(tarball, os.R_OK):
            print >> sys.stderr, "Troubles accessing file", tarball
            should_exit = True
        else:
            list_of_files.append(tarball)

    if should_exit:
        parser.print_help()
        sys.exit(1)

    return args

def ask_confirmation_for(options, msg):
    if options.csgteam:
        print msg,
        answer = sys.stdin.readline()
        print
        if answer.lower().strip() != "yes":
            print >> sys.stderr, "You did not say an ethusiastic 'yes', aborting..."
            sys.exit(1)

def get_prefix_and_moduledir(options, my_path, default_dirs):
    if options.csgteam:
        if os.environ['USER'] != "csgteam":
            ask_confirmation_for(options, "Should sudo into 'csgteam' to install as such. Continue anyway? ")
        prefix     = default_dirs["sw_install_dir"]  + my_path
        moduledir = default_dirs["mod_install_dir"]
    else:
        if "INSTALL_TEST_BASEPATH" in os.environ:
            basepath = os.environ['INSTALL_TEST_BASEPATH']
        else:
            basepath = default_dirs["scratch_tree"] + os.environ['USER'] + "/test_installs/"
        prefix = basepath + "/" + my_path
        moduledir = basepath + "/modulefiles/"

    if os.path.exists(prefix) and not options.force:
        print >> sys.stderr, "File already exists", prefix
        sys.exit(1)
    return os.path.abspath(prefix) + "/", os.path.abspath(moduledir) + "/"

def prepare_variables_and_warn(prefix, moduledir, options):
    name = options.install_script.name.split("-")[1]       # 0 is build, 1 is software name
    version = options.install_script.name.split("-")[2]    # 2 is software version

    variables = {'HPCI_SW_DIR': prefix,
                 'HPCI_SW_NAME': name,
                 'HPCI_SW_VERSION': version,
                 'HPCI_MOD_DIR': moduledir,
                 }

    for key in variables:
        os.environ[key] = variables[key]

    print "Setting environmental variables:"
    print 'HPCI_SW_DIR     =', prefix
    print 'HPCI_SW_NAME    =', name
    print 'HPCI_SW_VERSION =', version
    print 'HPCI_MOD_DIR    =', moduledir
    ask_confirmation_for(options, "This will attempt global install in " + prefix +
                         " by running ./" + options.install_script.name + " as " + os.environ['USER'] + ". Continue? ")
    return variables

real_stdout = None
def redirect_output(log):
    global real_stdout
    if real_stdout == None:
        real_stdout = sys.stdout
    sys.stdout = open(log, 'w')

def restore_output():
    if not real_stdout == None:
        sys.stdout = real_stdout

def start_logging_current_session(files_to_archive, log=HPCi_log, continuation=False):
    if continuation:
        tee.append_out_to(log)
    else:
        tee.overwrite_out_to(log)
        files_to_archive.append(log)
def stop_logging_current_session():
    tee.close_all_files()

def subcall(command, log=None, use_popen = False, variables = False, debug=False):
    if log:
        command += " &> " + log
    if debug:
        print >> sys.stderr, "DEBUG:", str_cmd
    if use_popen:
        return subprocess.Popen(command, stderr=subprocess.STDOUT, stdout = subprocess.PIPE, shell=True)
    else:
        return subprocess.call(command, shell=True)

def log_full_env(files_to_archive):
    print "Saving environment status in", env_log, "...",
    subcall("env", env_log)
    print "Done."
    files_to_archive.append(env_log)

    print "Saving module list in", module_log, "...",
    subcall("module list", module_log)
    print "Done.\n"
    files_to_archive.append(module_log)

def string_or_file(stuff):
    try:
        lines = stuff.splitlines(True)   # a string
    except AttributeError:
        lines = stuff                    # a file
    return lines

def identify_compiler_mpi():
    compiler = os.environ.get('LMOD_FAMILY_COMPILER','').strip()
    mpi = ""
    try:
        if compiler:
            compiler += "/" + os.environ['LMOD_COMPILER_VERSION'].strip()
            mpi = os.environ.get('LMOD_FAMILY_MPI','').strip()
            if mpi:
                mpi = "/" + mpi + "/" + os.environ['LMOD_MPI_VERSION'].strip()
    except KeyError, ke:
        for broken_key in ke.args:
            print >> sys.stderr, "Error:", broken_key, "not set"
        sys.exit(1)
    return compiler + mpi

def parse_installscript_for_directives(install_script, argument = ""):
    directive = "#HPCI " + argument
    executing_lines = []
    for line in string_or_file(install_script):
        if line.startswith(directive):
            exe_line = line.replace(directive, "", 1).split(" #")[0].strip()
            executing_lines.append(exe_line)
    modules_to_run = "; ".join(executing_lines)
    if len(modules_to_run) > 0:
        modules_to_run += ";"
    return modules_to_run

def verify_modules_are_loadable(modules_to_load, installscript_name):
    if (subcall(modules_to_load) != 0):
        print >> sys.stderr, "Modules from", installscript_name, "are not loadable:"
        print >> sys.stderr, modules_to_load
        sys.exit(1)

def execute_installscript(options, variables, files_to_archive):
    current_perm = os.stat(options.install_script.name)
    os.chmod(options.install_script.name, current_perm.st_mode | stat.S_IEXEC)
    print "Running ./" + options.install_script.name, "..."
    stop_logging_current_session()                                  # log the output of the script in a different dir
    log = "hpci." + options.install_script.name  + "-" + str(os.getpid()) + ".log"
    start_logging_current_session(files_to_archive, log=log)
    p = subcall("./" + options.install_script.name, use_popen=True, variables=variables, debug=options.debug)
    process_output = " "
    while process_output != "":               # continue while the process is running, it'll be "" when EOF is reached
        process_output = p.stdout.readline()  # needs to do this instead of using subprocess.call to allow 
        print process_output,                 # 'tee' to log the process output
    p.poll()
    stop_logging_current_session()
    files_to_archive.append(log)
    start_logging_current_session(files_to_archive, continuation=True)
    print "Done running ./" + options.install_script.name, "- exited with code", p.returncode
    files_to_archive.append(options.install_script.name)

def archive_in(prefix, files_to_archive):
    build_dir = prefix + "/BUILD_DIR/"
    if not os.path.exists(build_dir):
    	os.makedirs(build_dir)
    for somefile in files_to_archive:
    	shutil.copyfile(somefile, build_dir + os.path.basename(somefile))

def how_to_call_yourself(args, yourself, pwd):
    shell = [os.environ['SHELL']]
    if "bash" in shell[0]:
        shell.append('-l')
    shell.append('-c')
    new_invocation = ['ssh', '-t', 'localhost']
    new_invocation += shell
    args_copy = list(args)
    args_copy[0] = os.path.abspath(yourself + "/hpcinstall")
    args_copy.append("--nossh")
    new_invocation.append("'" + "ml purge; cd " + pwd + "; " +
                                " ".join(args_copy) +
                          "'")
    return new_invocation

# execution starts here
if __name__ == "__main__":
    options = parse_command_line_arguments()
    script_dir = os.path.dirname(os.path.realpath(__file__)) # directory where this script is

    if not options.nossh:
        sys.exit(subprocess.call(how_to_call_yourself(sys.argv, script_dir, os.getcwd())))

    my_program = parse_installscript_filename(options.install_script.name)
    verify_modules_are_loadable(options.modules_to_load, options.install_script.name)
    files_to_archive = []
    log_full_env(files_to_archive)
    comp_mpi = identify_compiler_mpi()
    prefix, moduledir = get_prefix_and_moduledir(options, my_program + "/" + comp_mpi, options.defaults)
    if not moduledir in os.environ['MODULEPATH']:
        # run 'module use' on this directory, but only if needed
        # modules_to_load = "module use " + moduledir + "; " + modules_to_load
        print "WARNING: Needs to figure out 'module use' business"
    start_logging_current_session(files_to_archive)
    print_invocation_info()
    variables = prepare_variables_and_warn(prefix, moduledir, options)
    execute_installscript(options, variables, files_to_archive)
    if options.archive:
        for tarball in options.archive:
            files_to_archive.append(tarball.name)
            print "Storing source archive", tarball.name
    if options.archive_list:
        for f in options.archive_list:
            files_to_archive.append(f)
            print "Storing source archive", f
    if options.archive_url:
        for u in options.archive_url:
            print "Not storing source archive, see instead", u
    print hashdir.hashdir(prefix), os.path.abspath(os.path.expanduser(prefix))
    stop_logging_current_session()
    hashlog = "hpci.fileinfo.log"
    redirect_output(hashlog)
    hashdir.hashdir(prefix, verbose=True)
    restore_output()
    files_to_archive.append(hashlog)
    archive_in(prefix, files_to_archive)
