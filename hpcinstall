#!/bin/env python

import optparse # cruder than others, but compatible with older versions of python
import os, shutil, sys, subprocess
import tee

use_parent_shell = os.environ['SHELL'] + " -c "    # workaround for fixing tcsh module problem, see https://github.com/NCAR/HPCinstall/issues/6
files_to_archive = [os.path.realpath(__file__)]    # logs and other files to preserve

def parse_installscript_filename(filename):
    sw_structure = filename.split("-")
    if len(sw_structure) !=2 and len(sw_structure) !=4:
        print "The install script file should be named like <software-version-compiler-version>,"
        print "or <software-version>. Got '" + filename + "' instead"
        sys.exit(1)
    my_compiler = ""
    if len(sw_structure) == 4:
        my_compiler = sw_structure[2] + "/" + sw_structure[3]
    return my_compiler, sw_structure[0] + "/" + sw_structure[1]

def parse_command_line_arguments():
    usage = ("usage: %prog [options] <software-version-compiler-version>\n" +
             "Required:\n" +
             "  <software-ver-compiler-ver> script in the current directory\n" +
             "                              doing the build and install\n" +
             "                              (don't use '/' or fully qualified paths)")
    parser = optparse.OptionParser(usage)
    parser.add_option("-c", "--csgteam", action="store_true", default=False, help='Install as csgteam (default: False)')
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        sys.exit(1)
    install_script = args[0]
    if not os.path.isfile(install_script) or "/" in install_script:
        parser.print_help()
        sys.exit(1)
    return install_script, options

def get_variables(options, my_program, my_compiler):
    if options.csgteam:
        if os.environ['USER'] != "csgteam":
            print "Must sudo into 'csgteam' user to run as csgteam"
            sys.exit(1)
        prefix = "/glade/apps/opt/" + my_program + "/" + my_compiler
        modulefile = "/glade/apps/modulefiles/" + my_program + ".lua"
    else:
        prefix = "/glade/scratch/" + os.environ['USER'] + "/" + my_program + "/" + my_compiler
        modulefile = "/glade/scratch/modulefiles/" + my_program + ".lua"

    if os.path.exists(prefix):
        print "File already exists", prefix
        sys.exit(1)
    if os.path.exists(modulefile):
        print "File already exists", prefix
        sys.exit(1)
    return prefix, modulefile

def set_variables_and_warn(prefix, modulefile, options, install_script):
    print "Setting environmental variables:"
    print "INSTALL_DIR     =", prefix
    print "MODULE_FILENAME =", modulefile
    print
    if options.csgteam:
        print "Then will run ./" + install_script + " as " + os.environ['USER'] + ". Continue? ",
        answer = sys.stdin.readline()
        print
        if answer.lower().strip() != "yes":
            print "You did not say an ethusiastic 'yes', aborting..."
            sys.exit(1)
    os.environ['INSTALL_DIR'] = prefix
    os.environ['MODULE_FILENAME'] = modulefile

def start_logging_current_session():
    log = "log.hpcinstall." + str(os.getpid()) + ".txt"
    tee.overwrite_out_to(log)
    files_to_archive.append(log)
def stop_logging_current_session():
    tee.close_all_files()

def log_full_env():
    env_log = "log.env.txt"
    print "Saving environment status in", env_log, "...",
    subprocess.call("env > " + env_log, shell=True)
    print "Done."
    files_to_archive.append(env_log)

    module_log = "log.modules.txt"
    print "Saving module list in", module_log, "...",
    subprocess.call(use_parent_shell + "'module list' &> " + module_log, shell=True)
    print "Done."
    files_to_archive.append(module_log)

def execute_installscript(install_script):
    install_log = "log.install." + install_script + ".txt"
    print "Passing control to ./" + install_script, "and logging output into", install_log
    print "----------------------------------------------"
    subprocess.call(use_parent_shell + "./" + install_script, stderr=subprocess.STDOUT, shell=True)
    print "----------------------------------------------"
    subprocess.call("touch " + install_log, shell=True)
    files_to_archive.append(install_log)
    print "./" + install_script, "completed with exit code ?"
    print "Not logged anything in", install_log, "see https://github.com/NCAR/HPCinstall/issues/3"

def archive_in(prefix):
    build_dir = prefix + "/BUILD_DIR/"
    os.makedirs(build_dir)
    for somefile in files_to_archive:
        shutil.copyfile(somefile, build_dir + os.path.basename(somefile))

# execution starts here
install_script, options = parse_command_line_arguments()
my_compiler, my_program = parse_installscript_filename(install_script)
prefix, modulefile = get_variables(options, my_program, my_compiler)
start_logging_current_session()
set_variables_and_warn(prefix, modulefile, options, install_script)
log_full_env()
execute_installscript(install_script)
stop_logging_current_session()
archive_in(prefix)
