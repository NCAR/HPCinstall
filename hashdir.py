#!/usr/bin/env python
import hashlib, os, argparse

def flatten_argument(a):
    """Flatten the multiple lists generated by append and nargs in argparse"""
    if a:
        b = [elem for elements in a for elem in elements]
    else:
        b = a
    return b

def hashdir(directory, verbose=False, to_be_excluded=["BUILD_DIR"]):
    SHAhash = hashlib.md5()
    for root, dirs, files in os.walk(directory):
        for tbe in to_be_excluded:
            if tbe in dirs:
                dirs.remove(tbe)
        dirs.sort()                      # guarantee an order for further steps
        for names in sorted(files):      # guarantee an order for current step
            filepath = os.path.abspath(os.path.expanduser(os.path.join(root, names)))
            if verbose:
                print 'Hashing', filepath,
            try:
                f1 = open(filepath, 'rb')
                while 1:
                # Read file in as little chunks
                    buf = f1.read(4096)
                    if not buf : break
                    SHAhash.update(hashlib.md5(buf).hexdigest())        # file content

            finally:
              f1.close()
              SHAhash.update(hashlib.md5(filepath).hexdigest())         # filename
              md = os.lstat(filepath)                                   # metadata
              SHAhash.update(hashlib.md5(str(md.st_mode)).hexdigest())  # permissions
              SHAhash.update(hashlib.md5(str(md.st_uid)).hexdigest())   # user
              SHAhash.update(hashlib.md5(str(md.st_gid)).hexdigest())   # group
              if verbose:
                  print "\tperm =", oct(md.st_mode),
                  print "UID =", md.st_uid, "GID =", md.st_gid,
                  print "size (bytes) =", md.st_size

    return SHAhash.hexdigest()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--directory", action='append', nargs='*', help="directory(-ies) to hash", required=True)
    parser.add_argument("-v", "--verbose", action='store_true', default=False, help="provide details of each file")
    parser.add_argument("-e", "--exclude", action='append', nargs='*', help="subdirectory(-ies) to exclude, in addition to BUILD_DIR", default=[])
    parser.add_argument("-i", "--include-build-dir", action="store_true", default=False, help="Do not exclude BUILD_DIR")
    args = parser.parse_args()
    dirs = flatten_argument(args.directory)
    to_be_excluded = flatten_argument(args.exclude)
    if not args.include_build_dir:
        to_be_excluded.append("BUILD_DIR")
    for mydir in dirs:
        if os.path.isdir(mydir):
            print hashdir(mydir, args.verbose, to_be_excluded), os.path.abspath(os.path.expanduser(mydir))
        else:
            print "No such directory:", os.path.abspath(mydir)
